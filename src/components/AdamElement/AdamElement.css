/* TODO: Update variables to be set on :host and use names without prefixes */
/* Font */
@property --font-family {
	syntax: '<custom-ident> | <string>';
	inherits: false;
	initial-value: 0.5rem;
}

@property --label-scale {
	syntax: '<number>';
	inherits: false;
	initial-value: 0.8;
}

@property --font-size {
	syntax: '<length>';
	inherits: false;
	initial-value: 1rem;
}

@property --font-normal {
	syntax: '<integer>';
	inherits: false;
	initial-value: 500;
}

@property --font-bold {
	syntax: '<integer>';
	inherits: false;
	initial-value: 900;
}

/* Transition */
@property --transition-function {
	syntax: '<custom-ident>';
	inherits: false;
	initial-value: ease-in-out;
}

@property --transition-time {
	syntax: '<time>';
	inherits: false;
	initial-value: 0.2s;
}

/* Borders */
@property --border-inner-radius {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.5rem;
}

@property --border-outer-radius {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.8rem;
}

@property --border-spacing {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.2rem;
}

@property --border-width {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.15rem;
}

@property --border-full {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.35rem;
}

/* Padding */
@property --padding-inline {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.6rem;
}

@property --padding-block {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.2rem;
}

/* Margin */
@property --margin-inline {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.95rem;
}

@property --margin-block {
	syntax: '<length>';
	inherits: false;
	initial-value: 0.55rem;
}

/* Sizes */
@property --label-top-space {
	syntax: '<length>';
	inherits: false;
	initial-value: 2.2rem;
}

@property --icon-size {
	syntax: '<length>';
	inherits: false;
	initial-value: 1.5rem;
}

@property --info-box-max-size {
	syntax: '<length>';
	inherits: false;
	initial-value: 7rem;
}

/* Input base */
@property --input-min-size {
	syntax: '<length>';
	inherits: false;
	initial-value: 7rem;
}

@property --input-max-size {
	syntax: '<length>';
	inherits: false;
	initial-value: 15rem;
}

@property --input-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --input-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --input-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --input-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --input-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --input-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --input-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --input-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Hover */
@property --hover-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --hover-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --hover-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --hover-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --hover-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --hover-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --hover-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --hover-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Focus */
@property --focus-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --focus-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --focus-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --focus-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --focus-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --focus-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --focus-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --focus-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Disabled */
@property --disabled-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --disabled-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --disabled-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --disabled-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --disabled-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --disabled-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --disabled-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --disabled-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Required */
@property --required-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --required-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --required-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --required-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --required-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --required-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --required-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --required-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Invalid */
@property --invalid-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --invalid-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --invalid-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --invalid-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --invalid-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --invalid-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --invalid-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --invalid-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Input Valid */
@property --valid-bg {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --valid-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --valid-inner-border {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --valid-outer-border {
	syntax: '<color>';
	inherits: false;
	initial-value: white;
}

@property --valid-inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --valid-inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: dashed;
}

@property --valid-outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

@property --valid-outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: false;
	initial-value: solid;
}

/* Select/options style */
@property --option-group-text {
	syntax: '<color>';
	inherits: false;
	initial-value: rgba(255, 255, 255, 0.5);
}

/* Dynamic styles */
@property --bg-color {
	syntax: '<color>';
	inherits: true;
	initial-value: rgba(0, 0, 0, 0.1);
}

@property --text-color {
	syntax: '<color>';
	inherits: true;
	initial-value: rgba(255, 255, 255, 0.5);
}

@property --icon-spacing {
	syntax: '<length>';
	inherits: false;
	initial-value: 0px;
}

@property --inner-border-color {
	syntax: '<color>';
	inherits: true;
	initial-value: rgba(169, 169, 169, 0.6);
}

@property --outer-border-color {
	syntax: '<color>';
	inherits: true;
	initial-value: white;
}

@property --inner-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: true;
	initial-value: dashed;
}

@property --inner-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: true;
	initial-value: dashed;
}

@property --outer-border-inline-style {
	syntax: 'solid | dotted | dashed';
	inherits: true;
	initial-value: solid;
}

@property --outer-border-block-style {
	syntax: 'solid | dotted | dashed';
	inherits: true;
	initial-value: solid;
}

:host {
	/* Font */
	--font-family: 'Oxanium', sans-serif;
	--label-scale: 0.8;
	--font-size: 1rem;
	--font-normal: 500;
	--font-bold: 900;

	/* Transition */
	--transition-function: ease-in-out;
	--transition-time: 0.2s;

	/* Border */
	--border-outer-radius: 0.8rem;
	--border-inner-radius: calc(var(--border-outer-radius) + (var(--border-width) + var(--border-spacing)) / 2);
	--border-spacing: 0.2rem;
	--border-width: 0.15rem;
	--border-full: calc(var(--border-width) + var(--border-spacing));

	/* Padding */
	--padding-inline: 0.6rem;
	--padding-block: 0.2rem;

	/* Margin */
	--margin-inline: calc(var(--padding-inline) + var(--border-full));
	--margin-block: calc(var(--padding-block) + var(--border-full));

	/* Sizes */
	--label-top-space: calc(var(--border-spacing) + (var(--label-scale) * var(--font-size)) + (var(--padding-block) * 2));
	--icon-size: calc(var(--font-size) * 1.5);
	--info-box-max-size: 7rem;

	/* Input base */
	--input-min-size: 7rem;
	--input-max-size: 15rem;

	--input-bg: rgba(0, 0, 0, 0.1);
	--input-text: rgba(255, 255, 255, 0.5);
	--input-inner-border: rgba(169, 169, 169, 0.6);
	--input-outer-border: white;

	--input-inner-border-inline-style: dashed;
	--input-inner-border-block-style: dashed;
	--input-outer-border-inline-style: solid;
	--input-outer-border-block-style: solid;

	/* Input hover */
	--hover-bg: rgba(0, 0, 0, 0.2);
	--hover-text: white;
	--hover-inner-border: white;
	--hover-outer-border: rgba(169, 169, 169, 0.6);

	--hover-inner-border-inline-style: dotted;
	--hover-inner-border-block-style: dashed;
	--hover-outer-border-inline-style: dashed;
	--hover-outer-border-block-style: solid;

	/* Input focus */
	--focus-bg: rgba(0, 0, 0, 0.3);
	--focus-text: white;
	--focus-inner-border: #9aff00;
	--focus-outer-border: rgba(169, 169, 169, 0.4);

	--focus-inner-border-inline-style: solid;
	--focus-inner-border-block-style: dashed;
	--focus-outer-border-inline-style: solid;
	--focus-outer-border-block-style: dashed;

	/* Input disabled */
	--disabled-bg: rgba(0, 0, 0, 0.2);
	--disabled-text: rgba(255, 255, 255, 0.4);
	--disabled-inner-border: rgba(169, 169, 169, 0.3);
	--disabled-outer-border: rgba(255, 255, 255, 0.2);

	--disabled-inner-border-inline-style: dotted;
	--disabled-inner-border-block-style: dotted;
	--disabled-outer-border-inline-style: dotted;
	--disabled-outer-border-block-style: dotted;

	/* Input requried */
	--required-bg: rgba(0, 0, 0, 0.2);
	--required-text: rgba(255, 255, 255, 0.5);
	--required-inner-border: #E3FF00;
	--required-outer-border: rgba(169, 169, 169, 1);

	--required-inner-border-inline-style: dashed;
	--required-inner-border-block-style: dashed;
	--required-outer-border-inline-style: solid;
	--required-outer-border-block-style: solid;

	/* Input invalid */
	--invalid-bg: rgba(0, 0, 0, 0.2);
	--invalid-text: tomato;
	--invalid-inner-border: crimson;
	--invalid-outer-border: sienna;

	--invalid-inner-border-inline-style: dashed;
	--invalid-inner-border-block-style: dashed;
	--invalid-outer-border-inline-style: dashed;
	--invalid-outer-border-block-style: dashed;

	/* Input valid */
	--valid-bg: rgba(0, 0, 0, 0.2);
	--valid-text: lightskyblue;
	--valid-inner-border: dodgerblue;
	--valid-outer-border: white;

	--valid-inner-border-inline-style: dashed;
	--valid-inner-border-block-style: dashed;
	--valid-outer-border-inline-style: solid;
	--valid-outer-border-block-style: solid;

	/* Selecto/option style */
	--option-group-text: rgba(225, 255, 255, 0.5);

	/* Dynamic values */

	/* Text and background */
	--text-color: var(--input-text);
	--bg-color: var(--input-bg);

	/* Icon */
	--icon-spacing: 0px;

	/* Borders */
	--inner-border-color: var(--input-inner-border);
	--outer-border-color: var(--input-outer-border);
	--inner-border-inline-style: var(--input-inner-border-inline-style);
	--inner-border-block-style: var(--input-inner-border-block-style);
	--outer-border-inline-style: var(--input-outer-border-inline-style);
	--outer-border-block-style: var(--input-outer-border-block-style);

	/* Base styles */
	font-family: var(--font-family);
	font-size: var(--font-size);
	color: var(--text-color);
	font-weight: var(--font-normal);
	font-variant: proportional-nums slashed-zero;
	letter-spacing: 0.04rem;
	line-height: 1;

	transition: all var(--transition-time) var(--transition-function);
	box-sizing: border-box;
}

:host *,
:host *::before,
:host *::after {
	box-sizing: inherit;
	transition: inherit;
	font: inherit;
}

@media (prefers-reduced-motion) {
	:host { --transition-time: 0; }
}

@media (prefers-color-scheme: light) {
	/* TODO */
}
